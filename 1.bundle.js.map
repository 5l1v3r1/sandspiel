{"version":3,"sources":["webpack:///./js/ui.js","webpack:///./js/render.js","webpack:///./js/paint.js","webpack:///./js/fluidShaders.js","webpack:///./js/constants.js","webpack:///./js/fluid.js","webpack:///./js/index.js","webpack:///./crate/pkg/sandtable.js","webpack:///./js/glsl/sand.glsl","webpack:///./js/glsl/sandVertex.glsl","webpack:///./js/glsl/baseVertex.glsl","webpack:///./js/glsl/clear.glsl","webpack:///./js/glsl/display.glsl","webpack:///./js/glsl/splat.glsl","webpack:///./js/glsl/advectionManualFilter.glsl","webpack:///./js/glsl/advection.glsl","webpack:///./js/glsl/divergence.glsl","webpack:///./js/glsl/curl.glsl","webpack:///./js/glsl/vorticity.glsl","webpack:///./js/glsl/pressure.glsl","webpack:///./js/glsl/gradientSubtract.glsl","webpack:///./js/glsl/velocityOut.glsl"],"names":["storage","functions","reglBuilder","require","fsh","vsh","startWebGL","_ref","canvas","universe","_ref$isSnapshot","isSnapshot","regl","attributes","preserveDrawingBuffer","width","height","cells","Uint8Array","memory","buffer","dataTexture","texture","data","drawSand","frag","uniforms","t","_ref2","tick","resolution","_ref3","viewportWidth","viewportHeight","dpi","window","devicePixelRatio","vert","position","count","poll","firebase","e","onload","Info","react_default","a","createElement","className","href","Menu","close","children","onClick","Submissions","submissions","loadSubmission","length","style","map","submission","key","id","src","concat","flexGrow","wordWrap","title","fetch","_url","method","headers","Content-Type","then","res","json","score","Date","timestamp","toLocaleDateString","sizeMap","Index","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","initialId","location","hash","replace","state","submissionMenuOpen","infoOpen","paused","submitting","size","dataURL","selectedElement","Species","Water","load","React","Component","setState","event","preventDefault","confirm","play","currentSubmission","reset","pause","cb","document","render","toDataURL","snapshot","context","getContext","imgData","createImageData","i","putImageData","cellData","_this2","_this$state","payload","image","body","JSON","stringify","response","console","log","catch","error","q","_this3","_this4","refFromURL","getDownloadURL","dlurl","blob","url","URL","createObjectURL","img","Image","ctx","drawImage","getImageData","cellsData","_this5","_objectSpread","_this6","_this$state2","Fragment","togglePause","viewBox","points","upload","loadSubmissions","info","v","setSize","padding","cx","cy","r","Object","keys","n","name","setElement","elementID","ElementButton","incScore","ui_Menu","closeMenu","display","placeholder","onChange","target","value","disabled","submit","ui_Submissions","ui_Info","ReactDOM","ui_Index","ref","UI","getElementById","fps","_class","frames","lastFrameTimeStamp","performance","now","_createClass","delta","push","shift","min","Infinity","max","sum","Math","mean","textContent","round","eventDistance","b","sqrt","pow","clientX","clientY","norm","mag","magnitude","scale","s","add","sub","painting","lastPaint","repeat","smoothPaint","clearInterval","setInterval","paint","startEvent","d","addEventListener","handleTouches","touches","Array","from","forEach","boundingRect","getBoundingClientRect","scaleX","scaleY","canvasLeft","left","canvasTop","top","x","floor","y","baseVertex","clearShaderString","displayShaderString","splatShaderString","advectionManualFilteringShaderString","advectionShaderString","divergenceShaderString","curlShaderString","vorticityShaderString","pressureShaderString","gradientSubtractShaderString","velocityOutShaderString","ratio","check","sandCanvas","fluidColor","__webpack_require__","__webpack_exports__","js_canvas","js_width","js_height","js_universe","js_reset","safari","history","pushState","onpopstate","go","navigator","userAgent","vendor","opera","test","substr","onbeforeunload","Universe","new","canvas2","ui","resize","screen_width","innerWidth","canvasStyle","innerHeight","fluid","gui","config","TEXTURE_DOWNSAMPLE","DENSITY_DISSIPATION","VELOCITY_DISSIPATION","PRESSURE_DISSIPATION","PRESSURE_ITERATIONS","CURL","SPLAT_RADIUS","pointers","splatStack","_getWebGLContext","halfFloat","supportLinearFiltering","params","alpha","depth","stencil","antialias","gl","isWebGL2","getExtension","clearColor","formatRGBA","formatRG","formatR","halfFloatTexType","HALF_FLOAT","HALF_FLOAT_OES","getSupportedFormat","RGBA16F","RGBA","RG16F","RG","R16F","RED","ext","getWebGLContext","_compileShaders","compileShader","type","source","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","baseVertexShader","VERTEX_SHADER","clearShader","FRAGMENT_SHADER","displayShader","splatShader","advectionManualFilteringShader","advectionShader","divergenceShader","curlShader","vorticityShader","pressureShader","gradientSubtractShader","velocityOutShader","compileShaders","internalFormat","format","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","fbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","supportRenderTextureFormat","pointerPrototype","dx","dy","down","moved","color","dat","Full","Half","Quarter","onFinishChange","initFramebuffers","step","fun","parseInt","random","texWidth","texHeight","density","velocity","velocityOut","burns","divergence","curl","pressure","GLProgram","vertexShader","fragmentShader","fluid_classCallCheck","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","uniformCount","ACTIVE_UNIFORMS","uniformName","getActiveUniform","getUniformLocation","useProgram","clearProgram","displayProgram","velocityOutProgram","splatProgram","advectionProgram","divergenceProgram","curlProgram","vorticityProgram","pressureProgram","gradientSubtractProgram","drawingBufferWidth","drawingBufferHeight","texType","rgba","rg","createDoubleFBO","LINEAR","createFBO","UNSIGNED_BYTE","texId","w","h","param","activeTexture","TEXTURE0","viewport","clear","COLOR_BUFFER_BIT","fbo1","fbo2","read","write","swap","temp","blit","bindBuffer","ARRAY_BUFFER","createBuffer","bufferData","Float32Array","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","Uint16Array","vertexAttribPointer","FLOAT","enableVertexAttribArray","destination","drawElements","TRIANGLES","UNSIGNED_SHORT","lastTime","winds","burnsData","splat","bind","texUnit","uniform1i","uTarget","uniform1f","aspectRatio","uniform2f","point","uniform3f","radius","targetTouches","pointer","identifier","changedTouches","j","update","dt","amount","multipleSplats","pressureTexId","uVelocity","uSource","texelSize","dissipation","uWind","uCurl","uTexture","uDivergence","uPressure","readPixels","uCells","startFluid","renderLoop","animationId","requestAnimationFrame","u","freeze","Empty","Wall","Sand","Stone","Ice","Gas","Cloner","Mite","Wood","Plant","Fungus","Seed","Fire","Lava","Acid","Dust","Oil","Firework","__wbg_random_2cc0c8d054a5c72a","ptr","wasm","freeUniverse","arg0","arg1","arg2","arg3","obj","create","prototype","__wrap","cachedTextDecoder","TextDecoder","cachegetUint8Memory","getStringFromWasm","len","decode","subarray","__wbindgen_throw","Error","module","exports"],"mappings":"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","file":"1.bundle.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { withUrlState } from \"with-url-state\";\n\nimport { memory } from \"../crate/pkg/sandtable_bg\";\nimport { Species } from \"../crate/pkg\";\n\nimport { height, universe, width, reset } from \"./index.js\";\nimport { snapshot } from \"./render.js\";\nvar storage;\nvar functions;\ntry {\n  storage = firebase.storage();\n  functions = firebase.functions();\n} catch (e) {}\nwindow.onload = () => {\n  functions = firebase.functions();\n  storage = firebase.storage();\n};\n\nlet storageUrl =\n  \"https://firebasestorage.googleapis.com/v0/b/sandtable-8d0f7.appspot.com/o/creations%2F\";\n\nconst Info = () => {\n  return (\n    <div className=\"Info\">\n      <h1>sandspiel </h1>\n      <p>\n        Created by <a href=\"https://maxbittker.com\">max bittker</a>\n      </p>\n      <p>\n        Welcome, and thanks for coming by! I hope that you enjoy exploring this\n        small game, and it brings you some calm.{\" \"}\n      </p>\n      <p>\n        Growing up, \"falling sand\" games like this one provided me hours of\n        entertainment and imagination. I want to particularly thank ha55ii's{\" \"}\n        <a href=\"https://dan-ball.jp/en/javagame/dust/\">Powder Game</a> as the\n        primary inspiration for sandspiel.\n      </p>\n      <br />\n      <p>\n        You can follow sandspiel on twitter for updates and new uploads:\n        <a href=\"https://twitter.com/sandspiel_feed\">@sandspiel_feed</a>\n      </p>\n      <br />\n      <p>\n        If you'd like, you can view the{\" \"}\n        <a href=\"https://github.com/maxbittker/sandspiel\">source code</a> or{\" \"}\n        <a href=\"https://github.com/maxbittker/sandspiel/issues\">report bugs</a>{\" \"}\n        on github\n      </p>\n      <h2>FAQs</h2>\n      <p>(TODO: write some FAQs)</p>\n      If you have any other questions, feel free to reach out on twitter and\n      I'll try to answer!\n      <h2>Element Information:</h2>\n      <h4>Wall </h4>\n      Indestructible\n      <h4>Sand </h4>\n      Sinks in water\n      <h4>Water </h4>\n      Puts out fire\n      <h4>Stone </h4>\n      Forms arches, folds under pressure\n      <h4>Ice </h4>\n      Freezes Water, slippery!\n      <h4>Gas </h4>\n      Highly Flammable!\n      <h4>Cloner </h4>\n      Copies the first element it touches\n      <h4>Mite </h4>\n      Eats wood and plant, but loves dust! Slides on ice\n      <h4>Wood </h4>\n      Sturdy, but biodegradable\n      <h4>Plant </h4>\n      Thrives in wet enviroments\n      <h4>Fungus </h4>\n      Spreads over everything\n      <h4>Seed </h4>\n      Grows in sand\n      <h4>Fire </h4>\n      Hot!\n      <h4>Lava </h4>\n      Flammable and heavy\n      <h4>Acid </h4>\n      Corrodes other elements\n      <h4>Dust </h4>\n      Pretty, but dangerously explosive\n      <h4>Oil </h4>\n      Produces smoke\n      <h4>Firework </h4>\n      Explodes into copies of the first element it touches\n    </div>\n  );\n};\n\nconst Menu = ({ close, children }) => {\n  return (\n    <div className=\"menu-scrim\">\n      <div className={\"menu\"}>\n        {children}\n\n        <button className=\"x\" onClick={close}>\n          x\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst Submissions = ({ submissions, loadSubmission }) => {\n  if (submissions.length == 0) {\n    return <div style={{ height: \"90vh\" }}>Loading Submissions...</div>;\n  }\n  return (\n    <div className=\"submissions\">\n      {submissions.map(submission => {\n        return (\n          <div key={submission.id} className=\"submission\">\n            <img src={`${storageUrl}${submission.data.id}.png?alt=media`} />\n            <div style={{ width: \"50%\" }}>\n              <h3 style={{ flexGrow: 1, wordWrap: \"break-word\" }}>\n                {submission.data.title}\n              </h3>\n              <h3\n                onClick={() => {\n                  // creations/:id/vote\n                  fetch(functions._url(`api/creations/${submission.id}/vote`), {\n                    method: \"PUT\",\n                    headers: {\n                      \"Content-Type\": \"application/json\"\n                    }\n                  })\n                    .then(res => res.json())\n                    .then(data => {\n                      // if (currentSubmission != null) {\n                      // console.log(data);\n                      // }\n                    });\n                }}\n              >\n                ♡{submission.data.score}\n              </h3>\n              <h4>\n                {new Date(submission.data.timestamp).toLocaleDateString()}\n              </h4>\n              <button\n                className=\"load\"\n                onClick={() => loadSubmission(submission)}\n              >\n                Load\n              </button>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nconst ElementButton = (name, selectedElement, setElement) => {\n  let elementID = Species[name];\n  return (\n    <button\n      className={elementID == selectedElement ? \"selected\" : \"\"}\n      key={name}\n      onClick={() => {\n        setElement(elementID);\n      }}\n    >\n      {\"  \"}\n      {name}\n      {\"  \"}\n    </button>\n  );\n};\n\nlet sizeMap = [2, 5, 10, 18, 30, 45];\n\nclass Index extends React.Component {\n  constructor(props) {\n    super(props);\n    let initialId = window.location.hash.replace(/#/, \"\");\n    this.state = {\n      submissionMenuOpen: false,\n      infoOpen: false,\n      paused: false,\n      submitting: false,\n      size: 2,\n      dataURL: {},\n      submissions: null,\n      selectedElement: Species.Water\n    };\n    if (initialId.length > 0) {\n      this.load(initialId);\n    }\n  }\n  togglePause() {\n    window.paused = !this.state.paused;\n    this.setState({ paused: !this.state.paused });\n  }\n  play() {\n    window.paused = false;\n    this.setState({ paused: false });\n  }\n  pause() {\n    window.paused = true;\n    this.setState({ paused: true });\n  }\n  setSize(event, size) {\n    event.preventDefault();\n    this.setState({\n      size\n    });\n  }\n  reset() {\n    if (window.confirm(\"Reset?\")) {\n      this.play();\n      window.location = \"#\";\n      this.setState({ currentSubmission: null });\n      reset();\n    }\n  }\n  menu() {\n    this.pause();\n    this.setState({ submissionMenuOpen: true });\n  }\n  info() {\n    this.pause();\n    this.setState({ infoOpen: true });\n  }\n  closeMenu() {\n    this.play();\n    this.setState({ submissionMenuOpen: false });\n  }\n  upload() {\n    let dataURL = snapshot(universe);\n    const cells = new Uint8Array(\n      memory.buffer,\n      universe.cells(),\n      width * height * 4\n    );\n\n    // Create canvas\n    let canvas = document.createElement(\"canvas\"),\n      context = canvas.getContext(\"2d\"),\n      imgData = context.createImageData(width, height);\n\n    canvas.height = height;\n    canvas.width = width;\n\n    // fill imgData with data from cells\n    for (var i = 0; i < width * height * 4; i++) {\n      if (i % 4 == 3) {\n        imgData.data[i] = 255;\n      } else {\n        imgData.data[i] = cells[i];\n      }\n    }\n    // put data to context at (0, 0)\n    context.putImageData(imgData, 0, 0);\n\n    let cellData = canvas.toDataURL(\"image/png\");\n\n    this.pause();\n    this.setState({\n      data: { dataURL, cells: cellData },\n      submissionMenuOpen: true\n    });\n  }\n  submit() {\n    let { title, data } = this.state;\n    let { dataURL, cells } = data;\n    let payload = { title, image: dataURL, cells };\n    this.setState({ submitting: true });\n\n    fetch(functions._url(\"api/creations\"), {\n      method: \"POST\",\n      body: JSON.stringify(payload), // data can be `string` or {object}!\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => res.json())\n      .then(response => {\n        console.log(\"Success:\", JSON.stringify(response));\n        this.play();\n      })\n      .catch(error => console.error(\"Error:\", error))\n      .then(() => {\n        this.setState({ submissionMenuOpen: false, submitting: false });\n      });\n  }\n  loadSubmissions(q) {\n    this.setState({ submissions: [] });\n    fetch(functions._url(\"api/creations\") + `?q=${q}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => res.json())\n      .then(response => {\n        this.setState({ submissions: response });\n        this.pause();\n      })\n      .catch(error => {\n        this.setState({ submissions: false });\n        console.error(\"Error:\", error);\n      });\n  }\n  load(id) {\n    window.location = `#${id}`;\n\n    fetch(functions._url(`api/creations/${id}`), {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => res.json())\n      .then(data => {\n        storage\n          .refFromURL(\n            `gs://sandtable-8d0f7.appspot.com/creations/${data.id}.data.png`\n          )\n          .getDownloadURL()\n          .then(dlurl => {\n            fetch(dlurl, {\n              method: \"GET\"\n            })\n              .then(res => res.blob())\n              .then(blob => {\n                // console.log(response);\n                this.setState({ currentSubmission: { id, data } });\n\n                var url = URL.createObjectURL(blob);\n                var img = new Image();\n                img.src = url;\n                img.onload = () => {\n                  var canvas = document.createElement(\"canvas\");\n                  canvas.width = width;\n                  canvas.height = height;\n                  var ctx = canvas.getContext(\"2d\");\n                  ctx.drawImage(img, 0, 0);\n                  var imgData = ctx.getImageData(\n                    0,\n                    0,\n                    canvas.width,\n                    canvas.height\n                  );\n\n                  const cellsData = new Uint8Array(\n                    memory.buffer,\n                    universe.cells(),\n                    width * height * 4\n                  );\n\n                  reset();\n\n                  for (var i = 0; i < width * height * 4; i++) {\n                    cellsData[i] = imgData.data[i];\n                  }\n                  this.pause();\n                  this.setState({ submissions: null });\n                };\n              })\n              .catch(error => console.error(\"Error:\", error));\n          });\n      })\n      .catch(error => {\n        this.setState({ submissions: false });\n        console.error(\"Error:\", error);\n      });\n  }\n  incScore() {\n    let { currentSubmission } = this.state;\n    let { id } = currentSubmission;\n    // creations/:id/vote\n    fetch(functions._url(`api/creations/${id}/vote`), {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (currentSubmission != null) {\n          console.log(data);\n          this.setState({ currentSubmission: { ...currentSubmission, data } });\n        }\n      });\n  }\n  render() {\n    let { size, paused, selectedElement } = this.state;\n    return (\n      <React.Fragment>\n        <button\n          onClick={() => this.togglePause()}\n          className={paused ? \"selected\" : \"\"}\n        >\n          {paused ? (\n            <svg height=\"20\" width=\"20\" id=\"d\" viewBox=\"0 0 300 300\">\n              <polygon id=\"play\" points=\"0,0 , 300,150 0,300\" />\n            </svg>\n          ) : (\n            <svg height=\"20\" width=\"20\" id=\"d\" viewBox=\"0 0 300 300\">\n              <polygon id=\"bar2\" points=\"0,0 110,0 110,300 0,300\" />\n              <polygon id=\"bar1\" points=\"190,0 300,0 300,300 190,300\" />\n            </svg>\n          )}\n        </button>\n        <button onClick={() => this.upload()}>Upload</button>\n        <button onClick={() => this.loadSubmissions()}>Browse</button>\n        <button onClick={() => this.reset()}>Reset</button>\n        <button onClick={() => this.info()}>Info</button>\n\n        {/* {paused && <button onClick={() => universe.tick()}>Tick</button>} */}\n        <span className=\"sizes\">\n          {sizeMap.map((v, i) => (\n            <button\n              key={i}\n              className={i == size ? \"selected\" : \"\"}\n              onClick={e => this.setSize(e, i)}\n              style={{ padding: \"0px\" }}\n            >\n              <svg height=\"23\" width=\"23\" id=\"d\" viewBox=\"0 0 100 100\">\n                <circle cx=\"50\" cy=\"50\" r={2 + v} />\n              </svg>\n            </button>\n          ))}\n        </span>\n\n        {Object.keys(Species).map(n =>\n          ElementButton(n, selectedElement, id =>\n            this.setState({ selectedElement: id })\n          )\n        )}\n        <button\n          className={-1 == selectedElement ? \"selected\" : \"\"}\n          key={name}\n          onClick={() => {\n            this.setState({ selectedElement: -1 });\n          }}\n        >\n          Wind\n        </button>\n        {this.state.currentSubmission && (\n          <div className=\"submission-title\">\n            <button onClick={() => this.incScore()}>\n              +♡{this.state.currentSubmission.data.score}{\" \"}\n            </button>\n            {this.state.currentSubmission.data.title}\n          </div>\n        )}\n        {this.state.submissionMenuOpen && (\n          <Menu close={() => this.closeMenu()}>\n            <h4>Share your creation with the people!</h4>\n            <img src={this.state.data.dataURL} />\n            <div style={{ display: \"flex\" }}>\n              <input\n                placeholder=\"title\"\n                onChange={e => this.setState({ title: e.target.value })}\n              />\n              <button\n                disabled={this.state.submitting}\n                onClick={() => this.submit()}\n              >\n                Submit\n              </button>\n            </div>\n          </Menu>\n        )}\n        {this.state.submissions && (\n          <Menu close={() => this.setState({ submissions: null })}>\n            <button onClick={() => this.loadSubmissions()}>Recent</button>\n            <button onClick={() => this.loadSubmissions(\"toprecent\")}>\n              Top Recent\n            </button>\n            <button onClick={() => this.loadSubmissions(\"score\")}>\n              Top All Time\n            </button>\n            <Submissions\n              submissions={this.state.submissions}\n              loadSubmission={submission => this.load(submission.id)}\n            />\n          </Menu>\n        )}\n\n        {this.state.infoOpen && (\n          <Menu close={() => this.setState({ infoOpen: false })}>\n            <Info />\n          </Menu>\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nReactDOM.render(\n  <Index\n    ref={UI => {\n      window.UI = UI;\n    }}\n  />,\n  document.getElementById(\"ui\")\n);\n\nconst fps = new class {\n  constructor() {\n    this.fps = document.getElementById(\"fps\");\n    this.frames = [];\n    this.lastFrameTimeStamp = performance.now();\n  }\n\n  render() {\n    // Convert the delta time since the last frame render into a measure\n    // of frames per second.\n    const now = performance.now();\n    const delta = now - this.lastFrameTimeStamp;\n    this.lastFrameTimeStamp = now;\n    const fps = (1 / delta) * 1000;\n\n    // Save only the latest 100 timings.\n    this.frames.push(fps);\n    if (this.frames.length > 30) {\n      this.frames.shift();\n    }\n\n    // Find the max, min, and mean of our 100 latest timings.\n    let min = Infinity;\n    let max = -Infinity;\n    let sum = 0;\n    for (let i = 0; i < this.frames.length; i++) {\n      sum += this.frames[i];\n      min = Math.min(this.frames[i], min);\n      max = Math.max(this.frames[i], max);\n    }\n    let mean = sum / this.frames.length;\n\n    // Render the statistics.\n    this.fps.textContent = `FPS:${Math.round(mean)}`;\n  }\n}();\n\nexport { fps, sizeMap };\n","const reglBuilder = require(\"regl\");\nimport { memory } from \"../crate/pkg/sandtable_bg\";\n\nlet fsh = require(\"./glsl/sand.glsl\");\nlet vsh = require(\"./glsl/sandVertex.glsl\");\n\nlet startWebGL = ({ canvas, universe, isSnapshot = false }) => {\n  const regl = reglBuilder({\n    canvas,\n    attributes: { preserveDrawingBuffer: isSnapshot }\n  });\n  // const lastFrame = regl.texture();\n  const width = universe.width();\n  const height = universe.height();\n  const cells = new Uint8Array(\n    memory.buffer,\n    universe.cells(),\n    width * height * 4\n  );\n  const dataTexture = regl.texture({ width, height, data: cells });\n\n  let drawSand = regl({\n    frag: fsh,\n    uniforms: {\n      t: ({ tick }) => tick,\n      data: () => dataTexture({ width, height, data: cells }),\n      resolution: ({ viewportWidth, viewportHeight }) => [\n        viewportWidth,\n        viewportHeight\n      ],\n      dpi: window.devicePixelRatio * 2,\n      isSnapshot\n      // backBuffer: lastFrame\n    },\n\n    vert: vsh,\n    attributes: {\n      // Full screen triangle\n      position: [[-1, 4], [-1, -1], [4, -1]]\n    },\n    // Our triangle has 3 vertices\n    count: 3\n  });\n\n  return () => {\n    regl.poll();\n    drawSand();\n  };\n};\n\nlet snapshot = (universe, cb) => {\n  let canvas = document.createElement(\"canvas\");\n  canvas.width = universe.width() / 2;\n  canvas.height = universe.height() / 2;\n  let render = startWebGL({ universe, canvas, isSnapshot: true });\n  render();\n\n  return canvas.toDataURL(\"image/png\");\n};\n\nexport { startWebGL, universe, snapshot };\n","import { height, universe, width } from \"./index.js\";\nimport { sizeMap } from \"./ui\";\nconst canvas = document.getElementById(\"sand-canvas\");\n\nconst eventDistance = (a, b) => {\n  return Math.sqrt(\n    Math.pow(a.clientX - b.clientX, 2) + Math.pow(a.clientY - b.clientY, 2),\n    2\n  );\n};\n\nconst magnitude = a => {\n  return Math.sqrt(Math.pow(a.clientX, 2) + Math.pow(a.clientY, 2), 2);\n};\n\nconst norm = a => {\n  let mag = magnitude(a);\n  return { clientX: a.clientX / mag, clientY: a.clientY / mag };\n};\nconst scale = (a, s) => {\n  return { clientX: a.clientX * s, clientY: a.clientY * s };\n};\nconst add = (a, b) => {\n  return { clientX: a.clientX + b.clientX, clientY: a.clientY + b.clientY };\n};\nconst sub = (a, b) => {\n  return { clientX: a.clientX - b.clientX, clientY: a.clientY - b.clientY };\n};\n\nlet painting = false;\nlet lastPaint = null;\nlet repeat = null;\ncanvas.addEventListener(\"mousedown\", event => {\n  event.preventDefault();\n  painting = true;\n  clearInterval(repeat);\n  repeat = window.setInterval(() => paint(event), 100);\n  paint(event);\n  lastPaint = event;\n});\ndocument.body.addEventListener(\"mouseup\", event => {\n  clearInterval(repeat);\n  if (painting) {\n    event.preventDefault();\n    lastPaint = null;\n    painting = false;\n  }\n});\ncanvas.addEventListener(\"mousemove\", event => {\n  clearInterval(repeat);\n  smoothPaint(event);\n});\ncanvas.addEventListener(\"mouseleave\", event => {\n  clearInterval(repeat);\n  lastPaint = null;\n});\ncanvas.addEventListener(\"touchstart\", event => {\n  event.preventDefault();\n  painting = true;\n  lastPaint = event;\n  handleTouches(event);\n});\ncanvas.addEventListener(\"touchend\", event => {\n  event.preventDefault();\n  lastPaint = null;\n  painting = false;\n  clearInterval(repeat);\n});\ncanvas.addEventListener(\"touchmove\", event => {\n  if (!window.paused) {\n    event.preventDefault();\n  }\n  clearInterval(repeat);\n  handleTouches(event);\n});\nfunction smoothPaint(event) {\n  clearInterval(repeat);\n  repeat = window.setInterval(() => paint(event), 100);\n  let startEvent = { clientX: event.clientX, clientY: event.clientY };\n  if (!painting) {\n    return;\n  }\n  let size = sizeMap[window.UI.state.size];\n  let i = 0;\n  paint(startEvent);\n  if (lastPaint) {\n    while (eventDistance(startEvent, lastPaint) > size / 2) {\n      let d = eventDistance(startEvent, lastPaint);\n      startEvent = add(\n        startEvent,\n        scale(norm(sub(lastPaint, event)), Math.min(size / 2, d))\n      );\n      i++;\n      if (i > 1000) {\n        break;\n      }\n      paint(startEvent);\n    }\n  }\n\n  lastPaint = event;\n}\n\nconst handleTouches = event => {\n  let touches = Array.from(event.touches);\n  if (touches.length == 1) {\n    smoothPaint(touches[0]);\n  } else {\n    touches.forEach(paint);\n  }\n};\n\nconst paint = event => {\n  if (!painting) {\n    return;\n  }\n  const boundingRect = canvas.getBoundingClientRect();\n\n  const scaleX = canvas.width / window.devicePixelRatio / boundingRect.width;\n  const scaleY = canvas.height / window.devicePixelRatio / boundingRect.height;\n\n  const canvasLeft = (event.clientX - boundingRect.left) * scaleX;\n  const canvasTop = (event.clientY - boundingRect.top) * scaleY;\n\n  const x = Math.min(Math.floor(canvasLeft), width - 1);\n  const y = Math.min(Math.floor(canvasTop), height - 1);\n  if (window.UI.state.selectedElement < 0) return;\n  universe.paint(\n    x,\n    y,\n    sizeMap[window.UI.state.size],\n    window.UI.state.selectedElement\n  );\n};\n","let baseVertex = require(\"./glsl/baseVertex.glsl\");\nlet clearShaderString = require(\"./glsl/clear.glsl\");\nlet displayShaderString = require(\"./glsl/display.glsl\");\nlet splatShaderString = require(\"./glsl/splat.glsl\");\nlet advectionManualFilteringShaderString = require(\"./glsl/advectionManualFilter.glsl\");\nlet advectionShaderString = require(\"./glsl/advection.glsl\");\nlet divergenceShaderString = require(\"./glsl/divergence.glsl\");\nlet curlShaderString = require(\"./glsl/curl.glsl\");\nlet vorticityShaderString = require(\"./glsl/vorticity.glsl\");\nlet pressureShaderString = require(\"./glsl/pressure.glsl\");\nlet gradientSubtractShaderString = require(\"./glsl/gradientSubtract.glsl\");\nlet velocityOutShaderString = require(\"./glsl/velocityOut.glsl\");\n\nfunction compileShaders(gl) {\n  function compileShader(type, source) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n      throw gl.getShaderInfoLog(shader);\n\n    return shader;\n  }\n\n  const baseVertexShader = compileShader(gl.VERTEX_SHADER, baseVertex);\n  const clearShader = compileShader(gl.FRAGMENT_SHADER, clearShaderString);\n  const displayShader = compileShader(gl.FRAGMENT_SHADER, displayShaderString);\n  const splatShader = compileShader(gl.FRAGMENT_SHADER, splatShaderString);\n  const advectionManualFilteringShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    advectionManualFilteringShaderString\n  );\n  const advectionShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    advectionShaderString\n  );\n  const divergenceShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    divergenceShaderString\n  );\n  const curlShader = compileShader(gl.FRAGMENT_SHADER, curlShaderString);\n  const vorticityShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    vorticityShaderString\n  );\n  const pressureShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    pressureShaderString\n  );\n  const gradientSubtractShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    gradientSubtractShaderString\n  );\n  const velocityOutShader = compileShader(\n    gl.FRAGMENT_SHADER,\n    velocityOutShaderString\n  );\n\n  return {\n    baseVertexShader,\n    clearShader,\n    displayShader,\n    splatShader,\n    advectionManualFilteringShader,\n    advectionShader,\n    divergenceShader,\n    curlShader,\n    vorticityShader,\n    pressureShader,\n    gradientSubtractShader,\n    velocityOutShader\n  };\n}\n\nexport { compileShaders };\n","let ratio = 4;\nif (window.devicePixelRatio > 1) {\n  ratio = 3;\n}\nexport { ratio };\n","// MIT License\n\n// Copyright (c) 2017 Pavel Dobryakov\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\"use strict\";\nimport * as dat from \"dat.gui\";\nimport { memory } from \"../crate/pkg/sandtable_bg\";\nimport { compileShaders } from \"./fluidShaders\";\nimport { ratio } from \"./constants\";\nconst canvas = document.getElementById(\"fluid-canvas\");\nconst sandCanvas = document.getElementById(\"sand-canvas\");\n\nlet fluidColor = [1, 1, 0.8];\n\nfunction startFluid({ universe }) {\n  canvas.width = universe.width();\n  canvas.height = universe.height();\n  let config = {\n    TEXTURE_DOWNSAMPLE: 0,\n    DENSITY_DISSIPATION: 0.98,\n    VELOCITY_DISSIPATION: 0.99,\n    PRESSURE_DISSIPATION: 0.8,\n    PRESSURE_ITERATIONS: 25,\n    CURL: 30,\n    SPLAT_RADIUS: 0.005\n  };\n\n  let pointers = [];\n  let splatStack = [];\n\n  const { gl, ext } = getWebGLContext(canvas);\n  let {\n    baseVertexShader,\n    clearShader,\n    displayShader,\n    splatShader,\n    advectionManualFilteringShader,\n    advectionShader,\n    divergenceShader,\n    curlShader,\n    vorticityShader,\n    pressureShader,\n    gradientSubtractShader,\n    velocityOutShader\n  } = compileShaders(gl);\n  startGUI();\n\n  function getWebGLContext(canvas) {\n    const params = {\n      alpha: false,\n      depth: false,\n      stencil: false,\n      antialias: false,\n      preserveDrawingBuffer: false\n    };\n\n    let gl = canvas.getContext(\"webgl2\", params);\n    const isWebGL2 = !!gl;\n    if (!isWebGL2)\n      gl =\n        canvas.getContext(\"webgl\", params) ||\n        canvas.getContext(\"experimental-webgl\", params);\n\n    let halfFloat;\n    let supportLinearFiltering;\n    if (isWebGL2) {\n      gl.getExtension(\"EXT_color_buffer_float\");\n      supportLinearFiltering = gl.getExtension(\"OES_texture_float_linear\");\n    } else {\n      halfFloat = gl.getExtension(\"OES_texture_half_float\");\n      supportLinearFiltering = gl.getExtension(\"OES_texture_half_float_linear\");\n    }\n\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n\n    const halfFloatTexType = isWebGL2\n      ? gl.HALF_FLOAT\n      : halfFloat.HALF_FLOAT_OES;\n    let formatRGBA;\n    let formatRG;\n    let formatR;\n\n    if (isWebGL2) {\n      formatRGBA = getSupportedFormat(\n        gl,\n        gl.RGBA16F,\n        gl.RGBA,\n        halfFloatTexType\n      );\n      formatRG = getSupportedFormat(gl, gl.RG16F, gl.RG, halfFloatTexType);\n      formatR = getSupportedFormat(gl, gl.R16F, gl.RED, halfFloatTexType);\n    } else {\n      formatRGBA = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n      formatRG = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n      formatR = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\n    }\n\n    return {\n      gl,\n      ext: {\n        formatRGBA,\n        formatRG,\n        formatR,\n        halfFloatTexType,\n        supportLinearFiltering\n      }\n    };\n  }\n\n  function getSupportedFormat(gl, internalFormat, format, type) {\n    if (!supportRenderTextureFormat(gl, internalFormat, format, type)) {\n      switch (internalFormat) {\n        case gl.R16F:\n          return getSupportedFormat(gl, gl.RG16F, gl.RG, type);\n        case gl.RG16F:\n          return getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, type);\n        default:\n          return null;\n      }\n    }\n\n    return {\n      internalFormat,\n      format\n    };\n  }\n\n  function supportRenderTextureFormat(gl, internalFormat, format, type) {\n    let texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      internalFormat,\n      4,\n      4,\n      0,\n      format,\n      type,\n      null\n    );\n\n    let fbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      texture,\n      0\n    );\n\n    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n    if (status != gl.FRAMEBUFFER_COMPLETE) return false;\n    return true;\n  }\n\n  function startGUI() {\n    var gui = new dat.GUI({ width: 300 });\n    gui\n      .add(config, \"TEXTURE_DOWNSAMPLE\", { Full: 0, Half: 1, Quarter: 2 })\n      .name(\"resolution\")\n      .onFinishChange(initFramebuffers);\n    gui.add(config, \"DENSITY_DISSIPATION\", 0.9, 1.0).name(\"density diffusion\");\n    gui\n      .add(config, \"VELOCITY_DISSIPATION\", 0.9, 1.0)\n      .name(\"velocity diffusion\");\n    gui\n      .add(config, \"PRESSURE_DISSIPATION\", 0.0, 1.0)\n      .name(\"pressure diffusion\");\n    gui.add(config, \"PRESSURE_ITERATIONS\", 1, 60).name(\"iterations\");\n    gui\n      .add(config, \"CURL\", 0, 50)\n      .name(\"vorticity\")\n      .step(1);\n    gui.add(config, \"SPLAT_RADIUS\", 0.0001, 0.01).name(\"splat radius\");\n\n    gui\n      .add(\n        {\n          fun: () => {\n            splatStack.push(parseInt(Math.random() * 20) + 5);\n          }\n        },\n        \"fun\"\n      )\n      .name(\"Random splats\");\n\n    gui.close();\n  }\n\n  function pointerPrototype() {\n    this.id = -1;\n    this.x = 0;\n    this.y = 0;\n    this.dx = 0;\n    this.dy = 0;\n    this.down = false;\n    this.moved = false;\n    this.color = [30, 300, 30];\n  }\n\n  pointers.push(new pointerPrototype());\n\n  class GLProgram {\n    constructor(vertexShader, fragmentShader) {\n      this.uniforms = {};\n      this.program = gl.createProgram();\n\n      gl.attachShader(this.program, vertexShader);\n      gl.attachShader(this.program, fragmentShader);\n      gl.linkProgram(this.program);\n\n      if (!gl.getProgramParameter(this.program, gl.LINK_STATUS))\n        throw gl.getProgramInfoLog(this.program);\n\n      const uniformCount = gl.getProgramParameter(\n        this.program,\n        gl.ACTIVE_UNIFORMS\n      );\n      for (let i = 0; i < uniformCount; i++) {\n        const uniformName = gl.getActiveUniform(this.program, i).name;\n        this.uniforms[uniformName] = gl.getUniformLocation(\n          this.program,\n          uniformName\n        );\n      }\n    }\n\n    bind() {\n      gl.useProgram(this.program);\n    }\n  }\n\n  let texWidth;\n  let texHeight;\n  let density;\n  let velocity;\n  let velocityOut;\n  let burns;\n  let cells;\n  let divergence;\n  let curl;\n  let pressure;\n  initFramebuffers();\n\n  const clearProgram = new GLProgram(baseVertexShader, clearShader);\n  const displayProgram = new GLProgram(baseVertexShader, displayShader);\n  const velocityOutProgram = new GLProgram(baseVertexShader, velocityOutShader);\n  const splatProgram = new GLProgram(baseVertexShader, splatShader);\n  const advectionProgram = new GLProgram(\n    baseVertexShader,\n    ext.supportLinearFiltering\n      ? advectionShader\n      : advectionManualFilteringShader\n  );\n  const divergenceProgram = new GLProgram(baseVertexShader, divergenceShader);\n  const curlProgram = new GLProgram(baseVertexShader, curlShader);\n  const vorticityProgram = new GLProgram(baseVertexShader, vorticityShader);\n  const pressureProgram = new GLProgram(baseVertexShader, pressureShader);\n  const gradientSubtractProgram = new GLProgram(\n    baseVertexShader,\n    gradientSubtractShader\n  );\n\n  function initFramebuffers() {\n    texWidth = gl.drawingBufferWidth >> config.TEXTURE_DOWNSAMPLE;\n    texHeight = gl.drawingBufferHeight >> config.TEXTURE_DOWNSAMPLE;\n\n    const texType = ext.halfFloatTexType;\n    const rgba = ext.formatRGBA;\n    const rg = ext.formatRG;\n    const r = ext.formatR;\n\n    velocity = createDoubleFBO(\n      0,\n      texWidth,\n      texHeight,\n      rg.internalFormat,\n      rg.format,\n      texType,\n      ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST\n    );\n    density = createDoubleFBO(\n      2,\n      texWidth,\n      texHeight,\n      rgba.internalFormat,\n      rgba.format,\n      texType,\n      ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST\n    );\n    divergence = createFBO(\n      4,\n      texWidth,\n      texHeight,\n      r.internalFormat,\n      r.format,\n      texType,\n      gl.NEAREST\n    );\n    curl = createFBO(\n      5,\n      texWidth,\n      texHeight,\n      r.internalFormat,\n      r.format,\n      texType,\n      gl.NEAREST\n    );\n    pressure = createDoubleFBO(\n      6,\n      texWidth,\n      texHeight,\n      r.internalFormat,\n      r.format,\n      texType,\n      gl.NEAREST\n    );\n    burns = createFBO(\n      8,\n      texWidth,\n      texHeight,\n      rg.internalFormat,\n      rg.format,\n      texType,\n      ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST\n    );\n    cells = createFBO(\n      10,\n      texWidth,\n      texHeight,\n      rg.internalFormat,\n      rg.format,\n      texType,\n      ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST\n    );\n    velocityOut = createFBO(\n      9,\n      texWidth,\n      texHeight,\n      gl.RGBA,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST\n    );\n  }\n\n  function createFBO(texId, w, h, internalFormat, format, type, param) {\n    gl.activeTexture(gl.TEXTURE0 + texId);\n    let texture = gl.createTexture();\n\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      internalFormat,\n      w,\n      h,\n      0,\n      format,\n      type,\n      null\n    );\n\n    let fbo = gl.createFramebuffer();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      texture,\n      0\n    );\n    gl.viewport(0, 0, w, h);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    return [texture, fbo, texId];\n  }\n\n  function createDoubleFBO(texId, w, h, internalFormat, format, type, param) {\n    let fbo1 = createFBO(texId, w, h, internalFormat, format, type, param);\n    let fbo2 = createFBO(texId + 1, w, h, internalFormat, format, type, param);\n\n    return {\n      get read() {\n        return fbo1;\n      },\n      get write() {\n        return fbo2;\n      },\n      swap() {\n        let temp = fbo1;\n        fbo1 = fbo2;\n        fbo2 = temp;\n      }\n    };\n  }\n\n  const blit = (() => {\n    gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\n    gl.bufferData(\n      gl.ARRAY_BUFFER,\n      new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]),\n      gl.STATIC_DRAW\n    );\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\n    gl.bufferData(\n      gl.ELEMENT_ARRAY_BUFFER,\n      new Uint16Array([0, 1, 2, 0, 2, 3]),\n      gl.STATIC_DRAW\n    );\n    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(0);\n\n    return destination => {\n      gl.bindFramebuffer(gl.FRAMEBUFFER, destination);\n      gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n    };\n  })();\n\n  let lastTime = Date.now();\n\n  // multipleSplats(parseInt(Math.random() * 20) + 5);\n\n  const width = universe.width();\n  const height = universe.height();\n  const winds = new Uint8Array(\n    memory.buffer,\n    universe.winds(),\n    width * height * 4\n  );\n\n  const burnsData = new Uint8Array(\n    memory.buffer,\n    universe.burns(),\n    width * height * 4\n  );\n\n  const cellsData = new Uint8Array(\n    memory.buffer,\n    universe.cells(),\n    width * height * 4\n  );\n  function reset() {\n    clearProgram.bind();\n\n    var texUnit = 0;\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, burns[0]);\n    gl.uniform1i(clearProgram.uniforms.uWind, texUnit++);\n\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, pressure.read[0]);\n    gl.uniform1i(clearProgram.uniforms.uTexture, texUnit++);\n\n    gl.uniform1f(clearProgram.uniforms.value, 0);\n\n    blit(pressure.write[1]);\n    pressure.swap();\n\n    texUnit = 0;\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, burns[0]);\n    gl.uniform1i(clearProgram.uniforms.uWind, texUnit++);\n\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, velocity.read[0]);\n    gl.uniform1i(clearProgram.uniforms.uTexture, texUnit++);\n\n    gl.uniform1f(clearProgram.uniforms.value, 0);\n\n    blit(velocity.write[1]);\n    velocity.swap();\n  }\n\n  function update() {\n    // resizeCanvas();\n\n    const dt = Math.min((Date.now() - lastTime) / 1000, 0.016);\n    lastTime = Date.now();\n\n    gl.viewport(0, 0, texWidth, texHeight);\n\n    if (splatStack.length > 0) multipleSplats(splatStack);\n    // multipleSplats(1);\n\n    // ADVECTION\n    // velocityRead ->\n    // velocityWrite\n    advectionProgram.bind();\n\n    var texUnit = 0;\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, velocity.read[0]);\n    gl.uniform1i(advectionProgram.uniforms.uVelocity, texUnit++);\n\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, velocity.read[0]);\n    gl.uniform1i(advectionProgram.uniforms.uSource, texUnit++);\n\n    gl.uniform2f(\n      advectionProgram.uniforms.texelSize,\n      1.0 / texWidth,\n      1.0 / texHeight\n    );\n    // gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.read[2]);\n    // gl.uniform1i(advectionProgram.uniforms.uSource, velocity.read[2]);\n    gl.uniform1f(advectionProgram.uniforms.dt, dt);\n    gl.uniform1f(\n      advectionProgram.uniforms.dissipation,\n      config.VELOCITY_DISSIPATION\n    );\n    blit(velocity.write[1]);\n    velocity.swap();\n\n    gl.bindTexture(gl.TEXTURE_2D, burns[0]);\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA,\n      width,\n      height,\n      0,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      burnsData\n    );\n\n    gl.bindTexture(gl.TEXTURE_2D, cells[0]);\n    gl.texImage2D(\n      gl.TEXTURE_2D,\n      0,\n      gl.RGBA,\n      width,\n      height,\n      0,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      cellsData\n    );\n\n    // ADVECTION\n    // burns\n    // velocityRead\n    // densityRead ->\n    // densityWrite\n\n    var texUnit = 0;\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, burns[0]);\n    gl.uniform1i(advectionProgram.uniforms.uWind, texUnit++);\n\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, velocity.read[0]);\n    gl.uniform1i(advectionProgram.uniforms.uVelocity, texUnit++);\n\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, density.read[0]);\n    gl.uniform1i(advectionProgram.uniforms.uSource, texUnit++);\n\n    // gl.uniform1i(advectionProgram.uniforms.uWind, burns[2]);\n    // gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.read[2]);\n    // gl.uniform1i(advectionProgram.uniforms.uSource, density.read[2]);\n    gl.uniform1f(\n      advectionProgram.uniforms.dissipation,\n      config.DENSITY_DISSIPATION\n    );\n    blit(density.write[1]);\n    density.swap();\n\n    // Splat\n    // velocityRead -> velocityWrite\n    // densityRead -> velocityWrite\n    for (let i = 0; i < pointers.length; i++) {\n      const pointer = pointers[i];\n      if (pointer.moved && window.UI.state.selectedElement < 0) {\n        splat(pointer.x, pointer.y, pointer.dx, pointer.dy, pointer.color);\n        pointer.moved = false;\n      }\n    }\n\n    // CURL\n    // velocityRead -> curl\n    curlProgram.bind();\n\n    var texUnit = 0;\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, velocity.read[0]);\n    gl.uniform1i(curlProgram.uniforms.uVelocity, texUnit++);\n\n    gl.uniform2f(\n      curlProgram.uniforms.texelSize,\n      1.0 / texWidth,\n      1.0 / texHeight\n    );\n    // gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.read[2]);\n    blit(curl[1]);\n\n    // VORTICITY\n    // velocityRead\n    // curl ->\n    // velocityWrite\n\n    vorticityProgram.bind();\n\n    var texUnit = 0;\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, velocity.read[0]);\n    gl.uniform1i(vorticityProgram.uniforms.uVelocity, texUnit++);\n\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, curl[0]);\n    gl.uniform1i(vorticityProgram.uniforms.uCurl, texUnit++);\n\n    gl.uniform2f(\n      vorticityProgram.uniforms.texelSize,\n      1.0 / texWidth,\n      1.0 / texHeight\n    );\n\n    // gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.read[2]);\n    // gl.uniform1i(vorticityProgram.uniforms.uCurl, curl[2]);\n    gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);\n    gl.uniform1f(vorticityProgram.uniforms.dt, dt);\n    blit(velocity.write[1]);\n    velocity.swap();\n\n    // DIVERGENCE\n    // velocityRead ->\n    // divergence\n    divergenceProgram.bind();\n\n    var texUnit = 0;\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, velocity.read[0]);\n    gl.uniform1i(divergenceProgram.uniforms.uVelocity, texUnit++);\n\n    gl.uniform2f(\n      divergenceProgram.uniforms.texelSize,\n      1.0 / texWidth,\n      1.0 / texHeight\n    );\n    // gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.read[2]);\n    blit(divergence[1]);\n\n    // CLEAR\n    // burns\n    // pressureRead->\n    // pressureWrite\n    clearProgram.bind();\n\n    var texUnit = 0;\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, burns[0]);\n    gl.uniform1i(clearProgram.uniforms.uWind, texUnit++);\n\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, pressure.read[0]);\n    gl.uniform1i(clearProgram.uniforms.uTexture, texUnit++);\n\n    let pressureTexId = texUnit - 1;\n\n    // let pressureTexId = pressure.read[2];\n    // gl.activeTexture(gl.TEXTURE0 + pressureTexId);\n    // gl.bindTexture(gl.TEXTURE_2D, pressure.read[0]);\n\n    // gl.uniform1i(clearProgram.uniforms.uWind, burns[2]);\n    // gl.uniform1i(clearProgram.uniforms.uTexture, pressureTexId);\n    gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE_DISSIPATION);\n\n    blit(pressure.write[1]);\n    pressure.swap();\n\n    // PRESSURE\n    // divergence\n    // pressureRead->\n    // pressureWrite\n    pressureProgram.bind();\n    //TODO\n    var texUnit = 0;\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, divergence[0]);\n    gl.uniform1i(pressureProgram.uniforms.uDivergence, texUnit++);\n\n    // gl.activeTexture(gl.TEXTURE0 + texUnit);\n    // gl.bindTexture(gl.TEXTURE_2D, pressure.read[0]);\n    // gl.uniform1i(clearProgram.uniforms.uTexture, texUnit++);\n\n    gl.uniform2f(\n      pressureProgram.uniforms.texelSize,\n      1.0 / texWidth,\n      1.0 / texHeight\n    );\n    // gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence[2]);\n    pressureTexId = pressure.read[2];\n    gl.uniform1i(pressureProgram.uniforms.uPressure, pressureTexId);\n    gl.activeTexture(gl.TEXTURE0 + pressureTexId);\n    for (let i = 0; i < config.PRESSURE_ITERATIONS; i++) {\n      gl.bindTexture(gl.TEXTURE_2D, pressure.read[0]);\n      blit(pressure.write[1]);\n      pressure.swap();\n    }\n\n    // VELOCITY OUT\n    // velocityRead\n    // pressureRead ->\n    // velocityOut\n    velocityOutProgram.bind();\n\n    var texUnit = 0;\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, velocity.read[0]);\n    gl.uniform1i(velocityOutProgram.uniforms.uTexture, texUnit++);\n\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, pressure.read[0]);\n    gl.uniform1i(velocityOutProgram.uniforms.uPressure, texUnit++);\n\n    // gl.uniform1i(velocityOutProgram.uniforms.uTexture, velocity.read[2]);\n    // gl.uniform1i(velocityOutProgram.uniforms.uPressure, pressure.read[2]);\n    blit(velocityOut[1]);\n    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, winds);\n\n    // GRADIENT SUBTRACT\n    // burns\n    // pressureRead\n    // velocityRead\n    // sands ->\n    // velocityWrite\n    gradientSubtractProgram.bind();\n\n    var texUnit = 0;\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, burns[0]);\n    gl.uniform1i(gradientSubtractProgram.uniforms.uWind, texUnit++);\n\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, pressure.read[0]);\n    gl.uniform1i(gradientSubtractProgram.uniforms.uPressure, texUnit++);\n\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, velocity.read[0]);\n    gl.uniform1i(gradientSubtractProgram.uniforms.uVelocity, texUnit++);\n\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, cells[0]);\n    gl.uniform1i(gradientSubtractProgram.uniforms.uCells, texUnit++);\n\n    gl.uniform2f(\n      gradientSubtractProgram.uniforms.texelSize,\n      1.0 / texWidth,\n      1.0 / texHeight\n    );\n\n    // gl.uniform1i(gradientSubtractProgram.uniforms.uWind, burns[2]);\n    // gl.uniform1i(gradientSubtractProgram.uniforms.uPressure, pressure.read[2]);\n    // gl.uniform1i(gradientSubtractProgram.uniforms.uVelocity, velocity.read[2]);\n    blit(velocity.write[1]);\n    velocity.swap();\n\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n\n    // DISPLAY\n    // density ->\n    // null/renderbuffer?\n    displayProgram.bind();\n\n    var texUnit = 0;\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, density.read[0]);\n    gl.uniform1i(displayProgram.uniforms.uTexture, texUnit++);\n\n    // gl.uniform1i(displayProgram.uniforms.uTexture, density.read[2]);\n\n    blit(null);\n  }\n\n  function splat(x, y, dx, dy, color) {\n    splatProgram.bind();\n\n    var texUnit = 0;\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, velocity.read[0]);\n    gl.uniform1i(splatProgram.uniforms.uTarget, texUnit++);\n\n    // gl.uniform1i(splatProgram.uniforms.uTarget, velocity.read[2]);\n    gl.uniform1f(\n      splatProgram.uniforms.aspectRatio,\n      canvas.width / canvas.height\n    );\n    gl.uniform2f(\n      splatProgram.uniforms.point,\n      x / canvas.width,\n      1.0 - y / canvas.height\n    );\n    gl.uniform3f(splatProgram.uniforms.color, dx, -dy, 1.0);\n    gl.uniform1f(\n      splatProgram.uniforms.radius,\n      (window.UI.state.size + 1) / 700\n    );\n    blit(velocity.write[1]);\n    velocity.swap();\n\n    gl.activeTexture(gl.TEXTURE0 + texUnit);\n    gl.bindTexture(gl.TEXTURE_2D, density.read[0]);\n    gl.uniform1i(splatProgram.uniforms.uTarget, texUnit++);\n\n    // gl.uniform1i(splatProgram.uniforms.uTarget, density.read[2]);\n    gl.uniform3f(splatProgram.uniforms.color, color[0], color[1], color[2]);\n    blit(density.write[1]);\n    density.swap();\n  }\n\n  function multipleSplats(amount) {\n    for (let i = 0; i < amount; i++) {\n      const color = fluidColor;\n      const x = canvas.width * Math.random();\n      const y = canvas.height * Math.random();\n      const dx = 1000 * (Math.random() - 0.5);\n      const dy = 1000 * (Math.random() - 0.5);\n      splat(x, y, dx, dy, color);\n    }\n  }\n\n  let boundingRect;\n  let scaleX;\n  let scaleY;\n\n  let resize = () => {\n    boundingRect = sandCanvas.getBoundingClientRect();\n    scaleX = sandCanvas.width / window.devicePixelRatio / boundingRect.width;\n    scaleY = sandCanvas.height / window.devicePixelRatio / boundingRect.height;\n  };\n  resize();\n  window.addEventListener(\"resize\", resize);\n\n  sandCanvas.addEventListener(\"mousemove\", e => {\n    const canvasLeft = (e.clientX - boundingRect.left) * scaleX;\n    const canvasTop = (e.clientY - boundingRect.top) * scaleY;\n    pointers[0].moved = pointers[0].down;\n    pointers[0].dx = (canvasLeft - pointers[0].x) * 10.0;\n    pointers[0].dy = (canvasTop - pointers[0].y) * 10.0;\n    pointers[0].x = canvasLeft;\n    pointers[0].y = canvasTop;\n  });\n\n  sandCanvas.addEventListener(\n    \"touchmove\",\n    e => {\n      if (!window.paused) {\n        e.preventDefault();\n      }\n      const touches = e.targetTouches;\n      for (let i = 0; i < touches.length; i++) {\n        let pointer = pointers[i];\n        pointer.moved = pointer.down;\n\n        const canvasLeft = (touches[i].clientX - boundingRect.left) * scaleX;\n        const canvasTop = (touches[i].clientY - boundingRect.top) * scaleY;\n\n        pointer.dx = (canvasLeft - pointer.x) * 10.0;\n        pointer.dy = (canvasTop - pointer.y) * 10.0;\n        pointer.x = canvasLeft;\n        pointer.y = canvasTop;\n      }\n    },\n    false\n  );\n\n  sandCanvas.addEventListener(\"mousedown\", () => {\n    pointers[0].down = true;\n    pointers[0].color = fluidColor;\n  });\n\n  sandCanvas.addEventListener(\"touchstart\", e => {\n    e.preventDefault();\n    const touches = e.targetTouches;\n    for (let i = 0; i < touches.length; i++) {\n      if (i >= pointers.length) pointers.push(new pointerPrototype());\n\n      const canvasLeft = (touches[i].clientX - boundingRect.left) * scaleX;\n      const canvasTop = (touches[i].clientY - boundingRect.top) * scaleY;\n\n      pointers[i].id = touches[i].identifier;\n      pointers[i].down = true;\n      pointers[i].x = canvasLeft;\n      pointers[i].y = canvasTop;\n      pointers[i].color = fluidColor;\n    }\n  });\n\n  window.addEventListener(\"mouseup\", () => {\n    pointers[0].down = false;\n  });\n\n  window.addEventListener(\"touchend\", e => {\n    const touches = e.changedTouches;\n    for (let i = 0; i < touches.length; i++)\n      for (let j = 0; j < pointers.length; j++)\n        if (touches[i].identifier == pointers[j].id) pointers[j].down = false;\n  });\n\n  return { update, reset };\n}\n\nexport { startFluid };\n","import { Universe } from \"../crate/pkg\";\n\nimport { startWebGL } from \"./render\";\nimport { fps } from \"./ui\";\nimport {} from \"./paint\";\nimport { startFluid } from \"./fluid\";\nimport { ratio } from \"./constants\";\nif (window.safari) {\n  history.pushState(null, null, location.href);\n  window.onpopstate = function(event) {\n    history.go(1);\n  };\n}\nfunction mobileAndTabletcheck() {\n  var check = false;\n  (function(a) {\n    if (\n      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(\n        a\n      ) ||\n      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n        a.substr(0, 4)\n      )\n    )\n      check = true;\n  })(navigator.userAgent || navigator.vendor || window.opera);\n  return check;\n}\n\nif (mobileAndTabletcheck()) {\n  window.onbeforeunload = function() {\n    return true;\n  };\n}\nlet n = 300;\nconst universe = Universe.new(n, n);\n\nlet width = n;\nlet height = n;\nconst canvas = document.getElementById(\"sand-canvas\");\nconst canvas2 = document.getElementById(\"fluid-canvas\");\n\ncanvas.height = n * window.devicePixelRatio;\ncanvas.width = n * window.devicePixelRatio;\n\ndocument.getElementById(\"background\").addEventListener(\"touchmove\", e => {\n  if (!window.paused) {\n    e.preventDefault();\n  }\n});\n\nconst ui = document.getElementById(\"ui\");\n\nlet resize = () => {\n  let screen_width = window.innerWidth;\n  let uiheight = 50;\n  let screen_height = window.innerHeight - uiheight;\n\n  let canvasStyle = \"\";\n  if (screen_width > screen_height) {\n    if (screen_width - window.innerHeight < 225) {\n      canvasStyle = `height: ${window.innerHeight}px; margin:3px`;\n      ui.style = `width: ${screen_width -\n        window.innerHeight -\n        12}px; margin: 2px;`;\n    } else {\n      canvasStyle = `height: ${window.innerHeight}px`;\n      ui.style = `width: ${(screen_width - window.innerHeight) / 2 -\n        7}px; margin: 2px;`;\n    }\n  } else {\n    canvasStyle = `width: ${screen_width}px; bottom:3px;`;\n  }\n  canvas.style = canvasStyle;\n  canvas2.style = canvasStyle;\n};\n\nresize();\nwindow.addEventListener(\"resize\", () => {\n  resize();\n});\n\nlet fluid = startFluid({ universe });\n\nlet drawSand = startWebGL({ canvas, universe });\n\nconst renderLoop = () => {\n  if (!window.paused) {\n    fps.render(); // new\n    universe.tick();\n    fluid.update();\n  }\n  drawSand();\n\n  window.animationId = requestAnimationFrame(renderLoop);\n};\n\nrenderLoop();\n\nfunction reset() {\n  fluid.reset();\n  universe.reset();\n}\nwindow.u = universe;\nexport { canvas, width, height, universe, ratio, reset };\n","/* tslint:disable */\nimport * as wasm from './sandtable_bg';\n\n/**\n*/\nexport const Species = Object.freeze({ Empty:0,Wall:1,Sand:2,Water:3,Stone:13,Ice:9,Gas:4,Cloner:5,Mite:15,Wood:7,Plant:11,Fungus:18,Seed:19,Fire:6,Lava:8,Acid:12,Dust:14,Oil:16,Firework:17, });\n\nexport function __wbg_random_2cc0c8d054a5c72a() {\n    return Math.random();\n}\n\nfunction freeCell(ptr) {\n\n    wasm.__wbg_cell_free(ptr);\n}\n/**\n*/\nexport class Cell {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeCell(ptr);\n    }\n\n}\n\nfunction freeUniverse(ptr) {\n\n    wasm.__wbg_universe_free(ptr);\n}\n/**\n*/\nexport class Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeUniverse(ptr);\n    }\n\n    /**\n    * @returns {void}\n    */\n    reset() {\n        return wasm.universe_reset(this.ptr);\n    }\n    /**\n    * @returns {void}\n    */\n    tick() {\n        return wasm.universe_tick(this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        return wasm.universe_width(this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    height() {\n        return wasm.universe_height(this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    cells() {\n        return wasm.universe_cells(this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    winds() {\n        return wasm.universe_winds(this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    burns() {\n        return wasm.universe_burns(this.ptr);\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @param {number} arg2\n    * @param {number} arg3\n    * @returns {void}\n    */\n    paint(arg0, arg1, arg2, arg3) {\n        return wasm.universe_paint(this.ptr, arg0, arg1, arg2, arg3);\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {Universe}\n    */\n    static new(arg0, arg1) {\n        return Universe.__wrap(wasm.universe_new(arg0, arg1));\n    }\n}\n\nfunction freeWind(ptr) {\n\n    wasm.__wbg_wind_free(ptr);\n}\n/**\n*/\nexport class Wind {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeWind(ptr);\n    }\n\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nexport function __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\n","module.exports = \"precision highp float;\\n#define GLSLIFY 1\\nuniform float t;\\nuniform float dpi;\\nuniform vec2 resolution;\\nuniform bool isSnapshot;\\nuniform sampler2D backBuffer;\\nuniform sampler2D data;\\n\\nvarying vec2 uv;\\n\\n// clang-format off\\nvec3 hsv2rgb_4_0(vec3 c) {\\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\n\\n\\n\\n//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_2_1(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289_2_1(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute_2_2(vec4 x) {\\n     return mod289_2_1(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt_2_3(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise_2_4(vec3 v)\\n  {\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D_2_5 = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g_2_6 = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g_2_6;\\n  vec3 i1 = min( g_2_6.xyz, l.zxy );\\n  vec3 i2 = max( g_2_6.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D_2_5.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289_2_1(i);\\n  vec4 p = permute_2_2( permute_2_2( permute_2_2(\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D_2_5.wyz - D_2_5.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1_2_7 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0_2_8 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1_2_7.xy,h.z);\\n  vec3 p3 = vec3(a1_2_7.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt_2_3(vec4(dot(p0_2_8,p0_2_8), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0_2_8 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0_2_8,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\\n\\n\\n//\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec3 mod289_1_9(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec2 mod289_1_9(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec3 permute_1_10(vec3 x) {\\n  return mod289_1_9(((x*34.0)+1.0)*x);\\n}\\n\\nfloat snoise_1_11(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289_1_9(i); // Avoid truncation effects in permutation\\n  vec3 p = permute_1_10( permute_1_10( i.y + vec3(0.0, i1.y, 1.0 ))\\n    + i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\\n\\n\\nhighp float random_3_12(vec2 co)\\n{\\n    highp float a = 12.9898;\\n    highp float b = 78.233;\\n    highp float c = 43758.5453;\\n    highp float dt= dot(co.xy ,vec2(a,b));\\n    highp float sn= mod(dt,3.14);\\n    return fract(sin(sn) * c);\\n}\\n\\n\\n\\n// clang-format on\\n\\nvoid main() {\\n  vec3 color;\\n  //   float r = abs(sin(t / 25.));\\n  //   if (length(uv) < r && length(uv) > r - 0.1) {\\n  // color = hsv2rgb(vec3(sin(t * 0.01), 0.5, 0.5));\\n\\n  vec2 textCoord = (uv * vec2(0.5, -0.5)) + vec2(0.5);\\n  // vec3 bb = texture2D(backBuffer, (uv * 0.5) + vec2(0.5)).rgb;\\n\\n  vec4 data = texture2D(data, textCoord);\\n  int type = int((data.r * 255.) + 0.1);\\n  float hue = 0.0;\\n  float saturation = 0.6;\\n  float lightness = 0.3 + data.g * 0.5;\\n  float noise = snoise_2_4(vec3(floor(uv * resolution / dpi), t * 0.05));\\n  float a = 1.0;\\n\\n  if (type == 0) {\\n    hue = 0.0;\\n    saturation = 0.1;\\n    lightness = 0.1;\\n    a = 0.1;\\n    if (isSnapshot) {\\n      saturation = 0.05;\\n      lightness = 1.01;\\n      a = 1.0;\\n    }\\n  } else if (type == 1) {\\n    hue = 0.1;\\n    saturation = 0.1;\\n    lightness = 0.4;\\n  } else if (type == 2) {\\n    hue = 0.1;\\n    saturation = 0.5;\\n    lightness += 0.3;\\n  } else if (type == 3) { // water\\n    hue = 0.6;\\n    lightness = 0.7 + data.g * 0.25 + noise * 0.1;\\n  } else if (type == 4) { // gas\\n    hue = 0.0;\\n    lightness += 0.4;\\n    saturation = 0.2;\\n  } else if (type == 5) { // clone\\n    hue = 0.9;\\n    saturation = 0.3;\\n  } else if (type == 6) { // fire\\n    hue = (data.g * 0.1);\\n    saturation = 0.7;\\n\\n    lightness = 0.7 + (data.g * 0.3) + ((noise + 0.8) * 0.5);\\n  } else if (type == 7) { // wood\\n    hue = (data.g * 0.1);\\n    saturation = 0.3;\\n    lightness = 0.3 + data.g * 0.3;\\n  } else if (type == 8) { // lava\\n    hue = (data.g * 0.1);\\n    lightness = 0.7 + data.g * 0.25 + noise * 0.1;\\n  } else if (type == 9) { // ice\\n    hue = 0.6;\\n    saturation = 0.4;\\n    lightness = 0.7 + data.g * 0.5;\\n  } else if (type == 10) { // sink\\n    hue = 0.9;\\n    saturation = 0.4;\\n    lightness = 1.0;\\n  } else if (type == 11) { // plant\\n    hue = 0.4;\\n    saturation = 0.4;\\n  } else if (type == 12) { // acid\\n    hue = 0.18;\\n    saturation = 0.9;\\n    lightness = 0.8 + data.g * 0.2 + noise * 0.05;\\n  } else if (type == 13) { // stone\\n    hue = -0.4 + (data.g * 0.5);\\n    saturation = 0.1;\\n    // lightness = 0.2 + data.g * 0.5;\\n  } else if (type == 14) { // dust\\n    hue = (data.g * 2.0) + t * .0008;\\n    saturation = 0.4;\\n    lightness = 0.8;\\n  } else if (type == 15) { // mite\\n    hue = 0.8;\\n    saturation = 0.9;\\n    lightness = 0.8;\\n  } else if (type == 16) { // oil\\n    hue = (data.g * 5.0) + t * .008;\\n\\n    saturation = 0.2;\\n    lightness = 0.3;\\n  } else if (type == 17) { // firework\\n    hue = 0.0;\\n    saturation = 0.4 + data.b;\\n    lightness = 0.9;\\n  } else if (type == 18) { // fungus\\n    hue = (data.g * 0.15) - 0.1;\\n    saturation = (data.g * 0.8) - 0.05;\\n\\n    // (data.g * 0.00);\\n    lightness = 1.5 - (data.g * 0.2);\\n  } else if (type == 19) { // seed/flower\\n\\n    hue = fract(fract(data.b * 2.) * 0.5) - 0.3;\\n    saturation = 0.7 * (data.g + 0.4) + data.b * 0.2;\\n    lightness = 0.9 * (data.g + 0.9);\\n  }\\n  if (isSnapshot == false) {\\n    lightness *= (0.975 + snoise_1_11(floor(uv * resolution / dpi)) * 0.025);\\n  }\\n  color = hsv2rgb_4_0(vec3(hue, saturation, lightness));\\n  gl_FragColor = vec4(color, a);\\n}\"","module.exports = \"\\n// boring \\\"pass-through\\\" vertex shader\\nprecision mediump float;\\n#define GLSLIFY 1\\nattribute vec2 position;\\nvarying vec2 uv;\\nvoid main() {\\n  uv = position;\\n  gl_Position = vec4(position, 0, 1);\\n}\"","module.exports = \"precision highp float;\\nprecision mediump sampler2D;\\n#define GLSLIFY 1\\nattribute vec2 aPosition;\\nvarying vec2 vUv;\\nvarying vec2 vL;\\nvarying vec2 vR;\\nvarying vec2 vT;\\nvarying vec2 vB;\\nuniform vec2 texelSize;\\nvoid main() {\\n  vUv = aPosition * 0.5 + 0.5;\\n  vL = vUv - vec2(texelSize.x, 0.0);\\n  vR = vUv + vec2(texelSize.x, 0.0);\\n  vT = vUv + vec2(0.0, texelSize.y);\\n  vB = vUv - vec2(0.0, texelSize.y);\\n  gl_Position = vec4(aPosition, 0.0, 1.0);\\n}\\n\"","module.exports = \"precision highp float;\\nprecision mediump sampler2D;\\n#define GLSLIFY 1\\nvarying vec2 vUv;\\nuniform sampler2D uTexture;\\nuniform sampler2D uWind;\\nuniform float value;\\nvoid main() {\\n  float pressure = texture2D(uWind, vUv).z;\\n  pressure *= 512.;\\n  pressure *= pressure;\\n  gl_FragColor = value * (texture2D(uTexture, vUv) + vec4(pressure));\\n}\"","module.exports = \"precision highp float;\\nprecision mediump sampler2D;\\n#define GLSLIFY 1\\nvarying vec2 vUv;\\nuniform sampler2D uTexture;\\nvoid main() {\\n  vec3 color = texture2D(uTexture, vUv).rgb * 0.1;\\n  color *= 0.5;\\n  color = min(color, 0.9);\\n  color = vec3(1.0) - color;\\n  color *= vec3(0.95, 0.9, 0.9);\\n  // color *= 0.5;\\n  gl_FragColor = vec4(color, 1.0);\\n}\\n\"","module.exports = \"precision highp float;\\nprecision mediump sampler2D;\\n#define GLSLIFY 1\\nvarying vec2 vUv;\\nuniform sampler2D uTarget;\\nuniform float aspectRatio;\\nuniform vec3 color;\\nuniform vec2 point;\\nuniform float radius;\\nvoid main() {\\n  vec2 p = vUv - point.xy;\\n  p.x *= aspectRatio;\\n  vec3 splat = exp(-dot(p, p) / radius) * color;\\n  vec3 base = texture2D(uTarget, vUv).xyz;\\n  gl_FragColor = vec4(base + splat, 1.0);\\n}\"","module.exports = \"precision highp float;\\nprecision mediump sampler2D;\\n#define GLSLIFY 1\\nvarying vec2 vUv;\\nuniform sampler2D uVelocity;\\nuniform sampler2D uSource;\\nuniform sampler2D uWind;\\nuniform vec2 texelSize;\\nuniform float dt;\\nuniform float dissipation;\\nvec4 bilerp(in sampler2D sam, in vec2 p) {\\n  vec4 st;\\n  st.xy = floor(p - 0.5) + 0.5;\\n  st.zw = st.xy + 1.0;\\n  vec4 uv = st * texelSize.xyxy;\\n  vec4 a = texture2D(sam, uv.xy);\\n  vec4 b = texture2D(sam, uv.zy);\\n  vec4 c = texture2D(sam, uv.xw);\\n  vec4 d = texture2D(sam, uv.zw);\\n  vec2 f = p - st.xy;\\n  return mix(mix(a, b, f.x), mix(c, d, f.x), f.y);\\n}\\nvoid main() {\\n  vec2 coord = gl_FragCoord.xy - dt * texture2D(uVelocity, vUv).xy;\\n  float density = texture2D(uWind, vUv).w;\\n  if (density > 0.99) {\\n    density = 0.;\\n  }\\n  gl_FragColor = dissipation * (bilerp(uSource, coord) + vec4(density));\\n  gl_FragColor.a = 1.0;\\n}\"","module.exports = \"\\nprecision highp float;\\nprecision mediump sampler2D;\\n#define GLSLIFY 1\\nvarying vec2 vUv;\\nuniform sampler2D uVelocity;\\nuniform sampler2D uSource;\\nuniform sampler2D uWind;\\nuniform vec2 texelSize;\\nuniform float dt;\\nuniform float dissipation;\\nvoid main() {\\n  vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\\n  float density = texture2D(uWind, vUv).w * 1.;\\n  if (density > 0.99) {\\n    density = 0.;\\n  }\\n\\n  gl_FragColor = dissipation * (texture2D(uSource, coord) + vec4(density));\\n  gl_FragColor.a = 1.0;\\n}\\n\"","module.exports = \"precision highp float;\\nprecision mediump sampler2D;\\n#define GLSLIFY 1\\nvarying vec2 vUv;\\nvarying vec2 vL;\\nvarying vec2 vR;\\nvarying vec2 vT;\\nvarying vec2 vB;\\nuniform sampler2D uVelocity;\\nvec2 sampleVelocity(in vec2 uv) {\\n  vec2 multiplier = vec2(1.0, 1.0);\\n  if (uv.x < 0.0) {\\n    uv.x = 0.0;\\n    multiplier.x = -1.0;\\n  }\\n  if (uv.x > 1.0) {\\n    uv.x = 1.0;\\n    multiplier.x = -1.0;\\n  }\\n  if (uv.y < 0.0) {\\n    uv.y = 0.0;\\n    multiplier.y = -1.0;\\n  }\\n  if (uv.y > 1.0) {\\n    uv.y = 1.0;\\n    multiplier.y = -1.0;\\n  }\\n  return multiplier * texture2D(uVelocity, uv).xy;\\n}\\nvoid main() {\\n  float L = sampleVelocity(vL).x;\\n  float R = sampleVelocity(vR).x;\\n  float T = sampleVelocity(vT).y;\\n  float B = sampleVelocity(vB).y;\\n  float div = 0.5 * (R - L + T - B);\\n  gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\\n}\\n\"","module.exports = \"precision highp float;\\nprecision mediump sampler2D;\\n#define GLSLIFY 1\\nvarying vec2 vUv;\\nvarying vec2 vL;\\nvarying vec2 vR;\\nvarying vec2 vT;\\nvarying vec2 vB;\\nuniform sampler2D uVelocity;\\nvoid main() {\\n  float L = texture2D(uVelocity, vL).y;\\n  float R = texture2D(uVelocity, vR).y;\\n  float T = texture2D(uVelocity, vT).x;\\n  float B = texture2D(uVelocity, vB).x;\\n  float vorticity = R - L - T + B;\\n  gl_FragColor = vec4(vorticity, 0.0, 0.0, 1.0);\\n}\"","module.exports = \"precision highp float;\\nprecision mediump sampler2D;\\n#define GLSLIFY 1\\nvarying vec2 vUv;\\nvarying vec2 vT;\\nvarying vec2 vB;\\nuniform sampler2D uVelocity;\\nuniform sampler2D uCurl;\\nuniform float curl;\\nuniform float dt;\\nvoid main() {\\n  float T = texture2D(uCurl, vT).x;\\n  float B = texture2D(uCurl, vB).x;\\n  float C = texture2D(uCurl, vUv).x;\\n  vec2 force = vec2(abs(T) - abs(B), 0.0);\\n  force *= 1.0 / length(force + 0.00001) * curl * C;\\n  vec2 vel = texture2D(uVelocity, vUv).xy;\\n  gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\\n}\"","module.exports = \"precision highp float;\\nprecision mediump sampler2D;\\n#define GLSLIFY 1\\nvarying vec2 vUv;\\nvarying vec2 vL;\\nvarying vec2 vR;\\nvarying vec2 vT;\\nvarying vec2 vB;\\nuniform sampler2D uPressure;\\nuniform sampler2D uDivergence;\\nvec2 boundary(in vec2 uv) {\\n  uv = min(max(uv, 0.0), 1.0);\\n  return uv;\\n}\\nvoid main() {\\n  float L = texture2D(uPressure, boundary(vL)).x;\\n  float R = texture2D(uPressure, boundary(vR)).x;\\n  float T = texture2D(uPressure, boundary(vT)).x;\\n  float B = texture2D(uPressure, boundary(vB)).x;\\n  float C = texture2D(uPressure, vUv).x;\\n  float divergence = texture2D(uDivergence, vUv).x;\\n  float pressure = (L + R + B + T - divergence) * 0.25;\\n  gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\\n}\"","module.exports = \"precision highp float;\\nprecision mediump sampler2D;\\n#define GLSLIFY 1\\nvarying vec2 vUv;\\nvarying vec2 vL;\\nvarying vec2 vR;\\nvarying vec2 vT;\\nvarying vec2 vB;\\nuniform sampler2D uPressure;\\nuniform sampler2D uVelocity;\\nuniform sampler2D uWind;\\nuniform sampler2D uCells;\\n\\nvec2 boundary(in vec2 uv) {\\n  uv = min(max(uv, 0.0), 1.0);\\n  return uv;\\n}\\nvoid main() {\\n  float L = texture2D(uPressure, boundary(vL)).x;\\n  float R = texture2D(uPressure, boundary(vR)).x;\\n  float T = texture2D(uPressure, boundary(vT)).x;\\n  float B = texture2D(uPressure, boundary(vB)).x;\\n  vec2 velocity = texture2D(uVelocity, vUv).xy;\\n  vec2 wind = texture2D(uWind, vUv).xy;\\n  vec2 cell = texture2D(uCells, vec2(vUv.x, 1.0 - vUv.y)).xy;\\n  velocity.xy -= vec2(R - L, T - B);\\n  velocity.xy += wind * 25.;\\n\\n  int type = int((cell.r * 255.) + 0.1);\\n\\n  // || type == 7 || type == 9\\n  if (type == 1 || type == 5) {\\n    velocity = vec2(0.);\\n  }\\n  // velocity = cell.rg * 100.;\\n  gl_FragColor = vec4(velocity, 0.0, 1.0);\\n}\"","module.exports = \"precision highp float;\\nprecision mediump sampler2D;\\n#define GLSLIFY 1\\nvarying vec2 vUv;\\nuniform sampler2D uTexture;\\nuniform sampler2D uPressure;\\nvoid main() {\\n  vec2 v = texture2D(uTexture, vUv).rg;\\n  float p = texture2D(uPressure, vUv).r;\\n  vec3 vp = vec3(v, p);\\n  vp = max(vp, vec3(-250.));\\n  vp = min(vp, vec3(250.));\\n  vp /= 500.;\\n  vp += vec3(0.5, 0.5, 0.);\\n  // v = vec2(0.5);\\n  gl_FragColor = vec4(vp, 0.0);\\n}\\n\""],"sourceRoot":""}